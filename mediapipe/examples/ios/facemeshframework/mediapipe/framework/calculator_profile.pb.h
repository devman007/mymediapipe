// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/calculator_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_5fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
namespace mediapipe {
class CalculatorProfile;
class CalculatorProfileDefaultTypeInternal;
extern CalculatorProfileDefaultTypeInternal _CalculatorProfile_default_instance_;
class GraphProfile;
class GraphProfileDefaultTypeInternal;
extern GraphProfileDefaultTypeInternal _GraphProfile_default_instance_;
class GraphTrace;
class GraphTraceDefaultTypeInternal;
extern GraphTraceDefaultTypeInternal _GraphTrace_default_instance_;
class GraphTrace_CalculatorTrace;
class GraphTrace_CalculatorTraceDefaultTypeInternal;
extern GraphTrace_CalculatorTraceDefaultTypeInternal _GraphTrace_CalculatorTrace_default_instance_;
class GraphTrace_StreamTrace;
class GraphTrace_StreamTraceDefaultTypeInternal;
extern GraphTrace_StreamTraceDefaultTypeInternal _GraphTrace_StreamTrace_default_instance_;
class StreamProfile;
class StreamProfileDefaultTypeInternal;
extern StreamProfileDefaultTypeInternal _StreamProfile_default_instance_;
class TimeHistogram;
class TimeHistogramDefaultTypeInternal;
extern TimeHistogramDefaultTypeInternal _TimeHistogram_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::CalculatorProfile* Arena::CreateMaybeMessage<::mediapipe::CalculatorProfile>(Arena*);
template<> ::mediapipe::GraphProfile* Arena::CreateMaybeMessage<::mediapipe::GraphProfile>(Arena*);
template<> ::mediapipe::GraphTrace* Arena::CreateMaybeMessage<::mediapipe::GraphTrace>(Arena*);
template<> ::mediapipe::GraphTrace_CalculatorTrace* Arena::CreateMaybeMessage<::mediapipe::GraphTrace_CalculatorTrace>(Arena*);
template<> ::mediapipe::GraphTrace_StreamTrace* Arena::CreateMaybeMessage<::mediapipe::GraphTrace_StreamTrace>(Arena*);
template<> ::mediapipe::StreamProfile* Arena::CreateMaybeMessage<::mediapipe::StreamProfile>(Arena*);
template<> ::mediapipe::TimeHistogram* Arena::CreateMaybeMessage<::mediapipe::TimeHistogram>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

enum GraphTrace_EventType : int {
  GraphTrace_EventType_UNKNOWN = 0,
  GraphTrace_EventType_OPEN = 1,
  GraphTrace_EventType_PROCESS = 2,
  GraphTrace_EventType_CLOSE = 3,
  GraphTrace_EventType_NOT_READY = 4,
  GraphTrace_EventType_READY_FOR_PROCESS = 5,
  GraphTrace_EventType_READY_FOR_CLOSE = 6,
  GraphTrace_EventType_THROTTLED = 7,
  GraphTrace_EventType_UNTHROTTLED = 8,
  GraphTrace_EventType_CPU_TASK_USER = 9,
  GraphTrace_EventType_CPU_TASK_SYSTEM = 10,
  GraphTrace_EventType_GPU_TASK = 11,
  GraphTrace_EventType_DSP_TASK = 12,
  GraphTrace_EventType_TPU_TASK = 13,
  GraphTrace_EventType_GPU_CALIBRATION = 14,
  GraphTrace_EventType_PACKET_QUEUED = 15
};
bool GraphTrace_EventType_IsValid(int value);
constexpr GraphTrace_EventType GraphTrace_EventType_EventType_MIN = GraphTrace_EventType_UNKNOWN;
constexpr GraphTrace_EventType GraphTrace_EventType_EventType_MAX = GraphTrace_EventType_PACKET_QUEUED;
constexpr int GraphTrace_EventType_EventType_ARRAYSIZE = GraphTrace_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTrace_EventType_descriptor();
template<typename T>
inline const std::string& GraphTrace_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GraphTrace_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GraphTrace_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GraphTrace_EventType_descriptor(), enum_t_value);
}
inline bool GraphTrace_EventType_Parse(
    const std::string& name, GraphTrace_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GraphTrace_EventType>(
    GraphTrace_EventType_descriptor(), name, value);
}
// ===================================================================

class TimeHistogram :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.TimeHistogram) */ {
 public:
  TimeHistogram();
  virtual ~TimeHistogram();

  TimeHistogram(const TimeHistogram& from);
  TimeHistogram(TimeHistogram&& from) noexcept
    : TimeHistogram() {
    *this = ::std::move(from);
  }

  inline TimeHistogram& operator=(const TimeHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeHistogram& operator=(TimeHistogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeHistogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeHistogram* internal_default_instance() {
    return reinterpret_cast<const TimeHistogram*>(
               &_TimeHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeHistogram& a, TimeHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeHistogram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeHistogram* New() const final {
    return CreateMaybeMessage<TimeHistogram>(nullptr);
  }

  TimeHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeHistogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeHistogram& from);
  void MergeFrom(const TimeHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.TimeHistogram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 4,
    kTotalFieldNumber = 1,
    kIntervalSizeUsecFieldNumber = 2,
    kNumIntervalsFieldNumber = 3,
  };
  // repeated int64 count = 4;
  int count_size() const;
  private:
  int _internal_count_size() const;
  public:
  void clear_count();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_count() const;
  void _internal_add_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_count();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 count(int index) const;
  void set_count(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_count();

  // optional int64 total = 1 [default = 0];
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 interval_size_usec = 2 [default = 1000000];
  bool has_interval_size_usec() const;
  private:
  bool _internal_has_interval_size_usec() const;
  public:
  void clear_interval_size_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 interval_size_usec() const;
  void set_interval_size_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_interval_size_usec() const;
  void _internal_set_interval_size_usec(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 num_intervals = 3 [default = 1];
  bool has_num_intervals() const;
  private:
  bool _internal_has_num_intervals() const;
  public:
  void clear_num_intervals();
  ::PROTOBUF_NAMESPACE_ID::int64 num_intervals() const;
  void set_num_intervals(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_intervals() const;
  void _internal_set_num_intervals(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.TimeHistogram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > count_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_;
  ::PROTOBUF_NAMESPACE_ID::int64 interval_size_usec_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_intervals_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class StreamProfile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.StreamProfile) */ {
 public:
  StreamProfile();
  virtual ~StreamProfile();

  StreamProfile(const StreamProfile& from);
  StreamProfile(StreamProfile&& from) noexcept
    : StreamProfile() {
    *this = ::std::move(from);
  }

  inline StreamProfile& operator=(const StreamProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamProfile& operator=(StreamProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamProfile* internal_default_instance() {
    return reinterpret_cast<const StreamProfile*>(
               &_StreamProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamProfile& a, StreamProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamProfile* New() const final {
    return CreateMaybeMessage<StreamProfile>(nullptr);
  }

  StreamProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamProfile& from);
  void MergeFrom(const StreamProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.StreamProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLatencyFieldNumber = 3,
    kBackEdgeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mediapipe.TimeHistogram latency = 3;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::mediapipe::TimeHistogram& latency() const;
  ::mediapipe::TimeHistogram* release_latency();
  ::mediapipe::TimeHistogram* mutable_latency();
  void set_allocated_latency(::mediapipe::TimeHistogram* latency);
  private:
  const ::mediapipe::TimeHistogram& _internal_latency() const;
  ::mediapipe::TimeHistogram* _internal_mutable_latency();
  public:

  // optional bool back_edge = 2 [default = false];
  bool has_back_edge() const;
  private:
  bool _internal_has_back_edge() const;
  public:
  void clear_back_edge();
  bool back_edge() const;
  void set_back_edge(bool value);
  private:
  bool _internal_back_edge() const;
  void _internal_set_back_edge(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.StreamProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mediapipe::TimeHistogram* latency_;
  bool back_edge_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class CalculatorProfile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.CalculatorProfile) */ {
 public:
  CalculatorProfile();
  virtual ~CalculatorProfile();

  CalculatorProfile(const CalculatorProfile& from);
  CalculatorProfile(CalculatorProfile&& from) noexcept
    : CalculatorProfile() {
    *this = ::std::move(from);
  }

  inline CalculatorProfile& operator=(const CalculatorProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculatorProfile& operator=(CalculatorProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculatorProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculatorProfile* internal_default_instance() {
    return reinterpret_cast<const CalculatorProfile*>(
               &_CalculatorProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CalculatorProfile& a, CalculatorProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculatorProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalculatorProfile* New() const final {
    return CreateMaybeMessage<CalculatorProfile>(nullptr);
  }

  CalculatorProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculatorProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculatorProfile& from);
  void MergeFrom(const CalculatorProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculatorProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.CalculatorProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputStreamProfilesFieldNumber = 7,
    kNameFieldNumber = 1,
    kProcessRuntimeFieldNumber = 4,
    kProcessInputLatencyFieldNumber = 5,
    kProcessOutputLatencyFieldNumber = 6,
    kOpenRuntimeFieldNumber = 2,
    kCloseRuntimeFieldNumber = 3,
  };
  // repeated .mediapipe.StreamProfile input_stream_profiles = 7;
  int input_stream_profiles_size() const;
  private:
  int _internal_input_stream_profiles_size() const;
  public:
  void clear_input_stream_profiles();
  ::mediapipe::StreamProfile* mutable_input_stream_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StreamProfile >*
      mutable_input_stream_profiles();
  private:
  const ::mediapipe::StreamProfile& _internal_input_stream_profiles(int index) const;
  ::mediapipe::StreamProfile* _internal_add_input_stream_profiles();
  public:
  const ::mediapipe::StreamProfile& input_stream_profiles(int index) const;
  ::mediapipe::StreamProfile* add_input_stream_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StreamProfile >&
      input_stream_profiles() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mediapipe.TimeHistogram process_runtime = 4;
  bool has_process_runtime() const;
  private:
  bool _internal_has_process_runtime() const;
  public:
  void clear_process_runtime();
  const ::mediapipe::TimeHistogram& process_runtime() const;
  ::mediapipe::TimeHistogram* release_process_runtime();
  ::mediapipe::TimeHistogram* mutable_process_runtime();
  void set_allocated_process_runtime(::mediapipe::TimeHistogram* process_runtime);
  private:
  const ::mediapipe::TimeHistogram& _internal_process_runtime() const;
  ::mediapipe::TimeHistogram* _internal_mutable_process_runtime();
  public:

  // optional .mediapipe.TimeHistogram process_input_latency = 5;
  bool has_process_input_latency() const;
  private:
  bool _internal_has_process_input_latency() const;
  public:
  void clear_process_input_latency();
  const ::mediapipe::TimeHistogram& process_input_latency() const;
  ::mediapipe::TimeHistogram* release_process_input_latency();
  ::mediapipe::TimeHistogram* mutable_process_input_latency();
  void set_allocated_process_input_latency(::mediapipe::TimeHistogram* process_input_latency);
  private:
  const ::mediapipe::TimeHistogram& _internal_process_input_latency() const;
  ::mediapipe::TimeHistogram* _internal_mutable_process_input_latency();
  public:

  // optional .mediapipe.TimeHistogram process_output_latency = 6;
  bool has_process_output_latency() const;
  private:
  bool _internal_has_process_output_latency() const;
  public:
  void clear_process_output_latency();
  const ::mediapipe::TimeHistogram& process_output_latency() const;
  ::mediapipe::TimeHistogram* release_process_output_latency();
  ::mediapipe::TimeHistogram* mutable_process_output_latency();
  void set_allocated_process_output_latency(::mediapipe::TimeHistogram* process_output_latency);
  private:
  const ::mediapipe::TimeHistogram& _internal_process_output_latency() const;
  ::mediapipe::TimeHistogram* _internal_mutable_process_output_latency();
  public:

  // optional int64 open_runtime = 2 [default = 0];
  bool has_open_runtime() const;
  private:
  bool _internal_has_open_runtime() const;
  public:
  void clear_open_runtime();
  ::PROTOBUF_NAMESPACE_ID::int64 open_runtime() const;
  void set_open_runtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_open_runtime() const;
  void _internal_set_open_runtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 close_runtime = 3 [default = 0];
  bool has_close_runtime() const;
  private:
  bool _internal_has_close_runtime() const;
  public:
  void clear_close_runtime();
  ::PROTOBUF_NAMESPACE_ID::int64 close_runtime() const;
  void set_close_runtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_close_runtime() const;
  void _internal_set_close_runtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.CalculatorProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StreamProfile > input_stream_profiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mediapipe::TimeHistogram* process_runtime_;
  ::mediapipe::TimeHistogram* process_input_latency_;
  ::mediapipe::TimeHistogram* process_output_latency_;
  ::PROTOBUF_NAMESPACE_ID::int64 open_runtime_;
  ::PROTOBUF_NAMESPACE_ID::int64 close_runtime_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class GraphTrace_StreamTrace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.GraphTrace.StreamTrace) */ {
 public:
  GraphTrace_StreamTrace();
  virtual ~GraphTrace_StreamTrace();

  GraphTrace_StreamTrace(const GraphTrace_StreamTrace& from);
  GraphTrace_StreamTrace(GraphTrace_StreamTrace&& from) noexcept
    : GraphTrace_StreamTrace() {
    *this = ::std::move(from);
  }

  inline GraphTrace_StreamTrace& operator=(const GraphTrace_StreamTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTrace_StreamTrace& operator=(GraphTrace_StreamTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTrace_StreamTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTrace_StreamTrace* internal_default_instance() {
    return reinterpret_cast<const GraphTrace_StreamTrace*>(
               &_GraphTrace_StreamTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphTrace_StreamTrace& a, GraphTrace_StreamTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTrace_StreamTrace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTrace_StreamTrace* New() const final {
    return CreateMaybeMessage<GraphTrace_StreamTrace>(nullptr);
  }

  GraphTrace_StreamTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTrace_StreamTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTrace_StreamTrace& from);
  void MergeFrom(const GraphTrace_StreamTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTrace_StreamTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GraphTrace.StreamTrace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kFinishTimeFieldNumber = 2,
    kPacketTimestampFieldNumber = 3,
    kPacketIdFieldNumber = 5,
    kEventDataFieldNumber = 6,
    kStreamIdFieldNumber = 4,
  };
  // optional int64 start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 finish_time = 2;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time() const;
  void set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finish_time() const;
  void _internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 packet_timestamp = 3;
  bool has_packet_timestamp() const;
  private:
  bool _internal_has_packet_timestamp() const;
  public:
  void clear_packet_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 packet_timestamp() const;
  void set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_packet_timestamp() const;
  void _internal_set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 packet_id = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_packet_id() const;
  private:
  bool _internal_has_packet_id() const;
  public:
  PROTOBUF_DEPRECATED void clear_packet_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 packet_id() const;
  PROTOBUF_DEPRECATED void set_packet_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_packet_id() const;
  void _internal_set_packet_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 event_data = 6;
  bool has_event_data() const;
  private:
  bool _internal_has_event_data() const;
  public:
  void clear_event_data();
  ::PROTOBUF_NAMESPACE_ID::int64 event_data() const;
  void set_event_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_event_data() const;
  void _internal_set_event_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 stream_id = 4;
  bool has_stream_id() const;
  private:
  bool _internal_has_stream_id() const;
  public:
  void clear_stream_id();
  ::PROTOBUF_NAMESPACE_ID::int32 stream_id() const;
  void set_stream_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stream_id() const;
  void _internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.GraphTrace.StreamTrace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 packet_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 packet_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 stream_id_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class GraphTrace_CalculatorTrace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.GraphTrace.CalculatorTrace) */ {
 public:
  GraphTrace_CalculatorTrace();
  virtual ~GraphTrace_CalculatorTrace();

  GraphTrace_CalculatorTrace(const GraphTrace_CalculatorTrace& from);
  GraphTrace_CalculatorTrace(GraphTrace_CalculatorTrace&& from) noexcept
    : GraphTrace_CalculatorTrace() {
    *this = ::std::move(from);
  }

  inline GraphTrace_CalculatorTrace& operator=(const GraphTrace_CalculatorTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTrace_CalculatorTrace& operator=(GraphTrace_CalculatorTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTrace_CalculatorTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTrace_CalculatorTrace* internal_default_instance() {
    return reinterpret_cast<const GraphTrace_CalculatorTrace*>(
               &_GraphTrace_CalculatorTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphTrace_CalculatorTrace& a, GraphTrace_CalculatorTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTrace_CalculatorTrace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTrace_CalculatorTrace* New() const final {
    return CreateMaybeMessage<GraphTrace_CalculatorTrace>(nullptr);
  }

  GraphTrace_CalculatorTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTrace_CalculatorTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTrace_CalculatorTrace& from);
  void MergeFrom(const GraphTrace_CalculatorTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTrace_CalculatorTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GraphTrace.CalculatorTrace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTraceFieldNumber = 6,
    kOutputTraceFieldNumber = 7,
    kInputTimestampFieldNumber = 2,
    kNodeIdFieldNumber = 1,
    kEventTypeFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kFinishTimeFieldNumber = 5,
    kThreadIdFieldNumber = 8,
  };
  // repeated .mediapipe.GraphTrace.StreamTrace input_trace = 6;
  int input_trace_size() const;
  private:
  int _internal_input_trace_size() const;
  public:
  void clear_input_trace();
  ::mediapipe::GraphTrace_StreamTrace* mutable_input_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >*
      mutable_input_trace();
  private:
  const ::mediapipe::GraphTrace_StreamTrace& _internal_input_trace(int index) const;
  ::mediapipe::GraphTrace_StreamTrace* _internal_add_input_trace();
  public:
  const ::mediapipe::GraphTrace_StreamTrace& input_trace(int index) const;
  ::mediapipe::GraphTrace_StreamTrace* add_input_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >&
      input_trace() const;

  // repeated .mediapipe.GraphTrace.StreamTrace output_trace = 7;
  int output_trace_size() const;
  private:
  int _internal_output_trace_size() const;
  public:
  void clear_output_trace();
  ::mediapipe::GraphTrace_StreamTrace* mutable_output_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >*
      mutable_output_trace();
  private:
  const ::mediapipe::GraphTrace_StreamTrace& _internal_output_trace(int index) const;
  ::mediapipe::GraphTrace_StreamTrace* _internal_add_output_trace();
  public:
  const ::mediapipe::GraphTrace_StreamTrace& output_trace(int index) const;
  ::mediapipe::GraphTrace_StreamTrace* add_output_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >&
      output_trace() const;

  // optional int64 input_timestamp = 2;
  bool has_input_timestamp() const;
  private:
  bool _internal_has_input_timestamp() const;
  public:
  void clear_input_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 input_timestamp() const;
  void set_input_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_input_timestamp() const;
  void _internal_set_input_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mediapipe.GraphTrace.EventType event_type = 3;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::mediapipe::GraphTrace_EventType event_type() const;
  void set_event_type(::mediapipe::GraphTrace_EventType value);
  private:
  ::mediapipe::GraphTrace_EventType _internal_event_type() const;
  void _internal_set_event_type(::mediapipe::GraphTrace_EventType value);
  public:

  // optional int64 start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 finish_time = 5;
  bool has_finish_time() const;
  private:
  bool _internal_has_finish_time() const;
  public:
  void clear_finish_time();
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time() const;
  void set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finish_time() const;
  void _internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 thread_id = 8;
  bool has_thread_id() const;
  private:
  bool _internal_has_thread_id() const;
  public:
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::int32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.GraphTrace.CalculatorTrace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace > input_trace_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace > output_trace_;
  ::PROTOBUF_NAMESPACE_ID::int64 input_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_id_;
  int event_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 finish_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 thread_id_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class GraphTrace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.GraphTrace) */ {
 public:
  GraphTrace();
  virtual ~GraphTrace();

  GraphTrace(const GraphTrace& from);
  GraphTrace(GraphTrace&& from) noexcept
    : GraphTrace() {
    *this = ::std::move(from);
  }

  inline GraphTrace& operator=(const GraphTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTrace& operator=(GraphTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTrace* internal_default_instance() {
    return reinterpret_cast<const GraphTrace*>(
               &_GraphTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GraphTrace& a, GraphTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTrace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTrace* New() const final {
    return CreateMaybeMessage<GraphTrace>(nullptr);
  }

  GraphTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTrace& from);
  void MergeFrom(const GraphTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GraphTrace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GraphTrace_StreamTrace StreamTrace;
  typedef GraphTrace_CalculatorTrace CalculatorTrace;

  typedef GraphTrace_EventType EventType;
  static constexpr EventType UNKNOWN =
    GraphTrace_EventType_UNKNOWN;
  static constexpr EventType OPEN =
    GraphTrace_EventType_OPEN;
  static constexpr EventType PROCESS =
    GraphTrace_EventType_PROCESS;
  static constexpr EventType CLOSE =
    GraphTrace_EventType_CLOSE;
  static constexpr EventType NOT_READY =
    GraphTrace_EventType_NOT_READY;
  static constexpr EventType READY_FOR_PROCESS =
    GraphTrace_EventType_READY_FOR_PROCESS;
  static constexpr EventType READY_FOR_CLOSE =
    GraphTrace_EventType_READY_FOR_CLOSE;
  static constexpr EventType THROTTLED =
    GraphTrace_EventType_THROTTLED;
  static constexpr EventType UNTHROTTLED =
    GraphTrace_EventType_UNTHROTTLED;
  static constexpr EventType CPU_TASK_USER =
    GraphTrace_EventType_CPU_TASK_USER;
  static constexpr EventType CPU_TASK_SYSTEM =
    GraphTrace_EventType_CPU_TASK_SYSTEM;
  static constexpr EventType GPU_TASK =
    GraphTrace_EventType_GPU_TASK;
  static constexpr EventType DSP_TASK =
    GraphTrace_EventType_DSP_TASK;
  static constexpr EventType TPU_TASK =
    GraphTrace_EventType_TPU_TASK;
  static constexpr EventType GPU_CALIBRATION =
    GraphTrace_EventType_GPU_CALIBRATION;
  static constexpr EventType PACKET_QUEUED =
    GraphTrace_EventType_PACKET_QUEUED;
  static inline bool EventType_IsValid(int value) {
    return GraphTrace_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    GraphTrace_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    GraphTrace_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    GraphTrace_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return GraphTrace_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return GraphTrace_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return GraphTrace_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCalculatorNameFieldNumber = 3,
    kStreamNameFieldNumber = 4,
    kCalculatorTraceFieldNumber = 5,
    kBaseTimeFieldNumber = 1,
    kBaseTimestampFieldNumber = 2,
  };
  // repeated string calculator_name = 3;
  int calculator_name_size() const;
  private:
  int _internal_calculator_name_size() const;
  public:
  void clear_calculator_name();
  const std::string& calculator_name(int index) const;
  std::string* mutable_calculator_name(int index);
  void set_calculator_name(int index, const std::string& value);
  void set_calculator_name(int index, std::string&& value);
  void set_calculator_name(int index, const char* value);
  void set_calculator_name(int index, const char* value, size_t size);
  std::string* add_calculator_name();
  void add_calculator_name(const std::string& value);
  void add_calculator_name(std::string&& value);
  void add_calculator_name(const char* value);
  void add_calculator_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& calculator_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_calculator_name();
  private:
  const std::string& _internal_calculator_name(int index) const;
  std::string* _internal_add_calculator_name();
  public:

  // repeated string stream_name = 4;
  int stream_name_size() const;
  private:
  int _internal_stream_name_size() const;
  public:
  void clear_stream_name();
  const std::string& stream_name(int index) const;
  std::string* mutable_stream_name(int index);
  void set_stream_name(int index, const std::string& value);
  void set_stream_name(int index, std::string&& value);
  void set_stream_name(int index, const char* value);
  void set_stream_name(int index, const char* value, size_t size);
  std::string* add_stream_name();
  void add_stream_name(const std::string& value);
  void add_stream_name(std::string&& value);
  void add_stream_name(const char* value);
  void add_stream_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stream_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stream_name();
  private:
  const std::string& _internal_stream_name(int index) const;
  std::string* _internal_add_stream_name();
  public:

  // repeated .mediapipe.GraphTrace.CalculatorTrace calculator_trace = 5;
  int calculator_trace_size() const;
  private:
  int _internal_calculator_trace_size() const;
  public:
  void clear_calculator_trace();
  ::mediapipe::GraphTrace_CalculatorTrace* mutable_calculator_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_CalculatorTrace >*
      mutable_calculator_trace();
  private:
  const ::mediapipe::GraphTrace_CalculatorTrace& _internal_calculator_trace(int index) const;
  ::mediapipe::GraphTrace_CalculatorTrace* _internal_add_calculator_trace();
  public:
  const ::mediapipe::GraphTrace_CalculatorTrace& calculator_trace(int index) const;
  ::mediapipe::GraphTrace_CalculatorTrace* add_calculator_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_CalculatorTrace >&
      calculator_trace() const;

  // optional int64 base_time = 1;
  bool has_base_time() const;
  private:
  bool _internal_has_base_time() const;
  public:
  void clear_base_time();
  ::PROTOBUF_NAMESPACE_ID::int64 base_time() const;
  void set_base_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_base_time() const;
  void _internal_set_base_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 base_timestamp = 2;
  bool has_base_timestamp() const;
  private:
  bool _internal_has_base_timestamp() const;
  public:
  void clear_base_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 base_timestamp() const;
  void set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_base_timestamp() const;
  void _internal_set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.GraphTrace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> calculator_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stream_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_CalculatorTrace > calculator_trace_;
  ::PROTOBUF_NAMESPACE_ID::int64 base_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 base_timestamp_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class GraphProfile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.GraphProfile) */ {
 public:
  GraphProfile();
  virtual ~GraphProfile();

  GraphProfile(const GraphProfile& from);
  GraphProfile(GraphProfile&& from) noexcept
    : GraphProfile() {
    *this = ::std::move(from);
  }

  inline GraphProfile& operator=(const GraphProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProfile& operator=(GraphProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProfile* internal_default_instance() {
    return reinterpret_cast<const GraphProfile*>(
               &_GraphProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GraphProfile& a, GraphProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProfile* New() const final {
    return CreateMaybeMessage<GraphProfile>(nullptr);
  }

  GraphProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphProfile& from);
  void MergeFrom(const GraphProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.GraphProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto);
    return ::descriptor_table_mediapipe_2fframework_2fcalculator_5fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphTraceFieldNumber = 1,
    kCalculatorProfilesFieldNumber = 2,
    kConfigFieldNumber = 3,
  };
  // repeated .mediapipe.GraphTrace graph_trace = 1;
  int graph_trace_size() const;
  private:
  int _internal_graph_trace_size() const;
  public:
  void clear_graph_trace();
  ::mediapipe::GraphTrace* mutable_graph_trace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace >*
      mutable_graph_trace();
  private:
  const ::mediapipe::GraphTrace& _internal_graph_trace(int index) const;
  ::mediapipe::GraphTrace* _internal_add_graph_trace();
  public:
  const ::mediapipe::GraphTrace& graph_trace(int index) const;
  ::mediapipe::GraphTrace* add_graph_trace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace >&
      graph_trace() const;

  // repeated .mediapipe.CalculatorProfile calculator_profiles = 2;
  int calculator_profiles_size() const;
  private:
  int _internal_calculator_profiles_size() const;
  public:
  void clear_calculator_profiles();
  ::mediapipe::CalculatorProfile* mutable_calculator_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorProfile >*
      mutable_calculator_profiles();
  private:
  const ::mediapipe::CalculatorProfile& _internal_calculator_profiles(int index) const;
  ::mediapipe::CalculatorProfile* _internal_add_calculator_profiles();
  public:
  const ::mediapipe::CalculatorProfile& calculator_profiles(int index) const;
  ::mediapipe::CalculatorProfile* add_calculator_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorProfile >&
      calculator_profiles() const;

  // optional .mediapipe.CalculatorGraphConfig config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::mediapipe::CalculatorGraphConfig& config() const;
  ::mediapipe::CalculatorGraphConfig* release_config();
  ::mediapipe::CalculatorGraphConfig* mutable_config();
  void set_allocated_config(::mediapipe::CalculatorGraphConfig* config);
  private:
  const ::mediapipe::CalculatorGraphConfig& _internal_config() const;
  ::mediapipe::CalculatorGraphConfig* _internal_mutable_config();
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.GraphProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace > graph_trace_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorProfile > calculator_profiles_;
  ::mediapipe::CalculatorGraphConfig* config_;
  friend struct ::TableStruct_mediapipe_2fframework_2fcalculator_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeHistogram

// optional int64 total = 1 [default = 0];
inline bool TimeHistogram::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeHistogram::has_total() const {
  return _internal_has_total();
}
inline void TimeHistogram::clear_total() {
  total_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::total() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeHistogram.total)
  return _internal_total();
}
inline void TimeHistogram::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void TimeHistogram::set_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeHistogram.total)
}

// optional int64 interval_size_usec = 2 [default = 1000000];
inline bool TimeHistogram::_internal_has_interval_size_usec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeHistogram::has_interval_size_usec() const {
  return _internal_has_interval_size_usec();
}
inline void TimeHistogram::clear_interval_size_usec() {
  interval_size_usec_ = PROTOBUF_LONGLONG(1000000);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::_internal_interval_size_usec() const {
  return interval_size_usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::interval_size_usec() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeHistogram.interval_size_usec)
  return _internal_interval_size_usec();
}
inline void TimeHistogram::_internal_set_interval_size_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  interval_size_usec_ = value;
}
inline void TimeHistogram::set_interval_size_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_interval_size_usec(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeHistogram.interval_size_usec)
}

// optional int64 num_intervals = 3 [default = 1];
inline bool TimeHistogram::_internal_has_num_intervals() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeHistogram::has_num_intervals() const {
  return _internal_has_num_intervals();
}
inline void TimeHistogram::clear_num_intervals() {
  num_intervals_ = PROTOBUF_LONGLONG(1);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::_internal_num_intervals() const {
  return num_intervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::num_intervals() const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeHistogram.num_intervals)
  return _internal_num_intervals();
}
inline void TimeHistogram::_internal_set_num_intervals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  num_intervals_ = value;
}
inline void TimeHistogram::set_num_intervals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_intervals(value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeHistogram.num_intervals)
}

// repeated int64 count = 4;
inline int TimeHistogram::_internal_count_size() const {
  return count_.size();
}
inline int TimeHistogram::count_size() const {
  return _internal_count_size();
}
inline void TimeHistogram::clear_count() {
  count_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::_internal_count(int index) const {
  return count_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimeHistogram::count(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.TimeHistogram.count)
  return _internal_count(index);
}
inline void TimeHistogram::set_count(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  count_.Set(index, value);
  // @@protoc_insertion_point(field_set:mediapipe.TimeHistogram.count)
}
inline void TimeHistogram::_internal_add_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  count_.Add(value);
}
inline void TimeHistogram::add_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_count(value);
  // @@protoc_insertion_point(field_add:mediapipe.TimeHistogram.count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TimeHistogram::_internal_count() const {
  return count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TimeHistogram::count() const {
  // @@protoc_insertion_point(field_list:mediapipe.TimeHistogram.count)
  return _internal_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TimeHistogram::_internal_mutable_count() {
  return &count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TimeHistogram::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.TimeHistogram.count)
  return _internal_mutable_count();
}

// -------------------------------------------------------------------

// StreamProfile

// optional string name = 1;
inline bool StreamProfile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StreamProfile::has_name() const {
  return _internal_has_name();
}
inline void StreamProfile::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StreamProfile::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.StreamProfile.name)
  return _internal_name();
}
inline void StreamProfile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mediapipe.StreamProfile.name)
}
inline std::string* StreamProfile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mediapipe.StreamProfile.name)
  return _internal_mutable_name();
}
inline const std::string& StreamProfile::_internal_name() const {
  return name_.GetNoArena();
}
inline void StreamProfile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StreamProfile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.StreamProfile.name)
}
inline void StreamProfile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediapipe.StreamProfile.name)
}
inline void StreamProfile::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediapipe.StreamProfile.name)
}
inline std::string* StreamProfile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamProfile::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.StreamProfile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamProfile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.StreamProfile.name)
}

// optional bool back_edge = 2 [default = false];
inline bool StreamProfile::_internal_has_back_edge() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamProfile::has_back_edge() const {
  return _internal_has_back_edge();
}
inline void StreamProfile::clear_back_edge() {
  back_edge_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StreamProfile::_internal_back_edge() const {
  return back_edge_;
}
inline bool StreamProfile::back_edge() const {
  // @@protoc_insertion_point(field_get:mediapipe.StreamProfile.back_edge)
  return _internal_back_edge();
}
inline void StreamProfile::_internal_set_back_edge(bool value) {
  _has_bits_[0] |= 0x00000004u;
  back_edge_ = value;
}
inline void StreamProfile::set_back_edge(bool value) {
  _internal_set_back_edge(value);
  // @@protoc_insertion_point(field_set:mediapipe.StreamProfile.back_edge)
}

// optional .mediapipe.TimeHistogram latency = 3;
inline bool StreamProfile::_internal_has_latency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || latency_ != nullptr);
  return value;
}
inline bool StreamProfile::has_latency() const {
  return _internal_has_latency();
}
inline void StreamProfile::clear_latency() {
  if (latency_ != nullptr) latency_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TimeHistogram& StreamProfile::_internal_latency() const {
  const ::mediapipe::TimeHistogram* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::TimeHistogram*>(
      &::mediapipe::_TimeHistogram_default_instance_);
}
inline const ::mediapipe::TimeHistogram& StreamProfile::latency() const {
  // @@protoc_insertion_point(field_get:mediapipe.StreamProfile.latency)
  return _internal_latency();
}
inline ::mediapipe::TimeHistogram* StreamProfile::release_latency() {
  // @@protoc_insertion_point(field_release:mediapipe.StreamProfile.latency)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TimeHistogram* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::mediapipe::TimeHistogram* StreamProfile::_internal_mutable_latency() {
  _has_bits_[0] |= 0x00000002u;
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimeHistogram>(GetArenaNoVirtual());
    latency_ = p;
  }
  return latency_;
}
inline ::mediapipe::TimeHistogram* StreamProfile::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:mediapipe.StreamProfile.latency)
  return _internal_mutable_latency();
}
inline void StreamProfile::set_allocated_latency(::mediapipe::TimeHistogram* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latency_;
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.StreamProfile.latency)
}

// -------------------------------------------------------------------

// CalculatorProfile

// optional string name = 1;
inline bool CalculatorProfile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalculatorProfile::has_name() const {
  return _internal_has_name();
}
inline void CalculatorProfile::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CalculatorProfile::name() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.name)
  return _internal_name();
}
inline void CalculatorProfile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorProfile.name)
}
inline std::string* CalculatorProfile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorProfile.name)
  return _internal_mutable_name();
}
inline const std::string& CalculatorProfile::_internal_name() const {
  return name_.GetNoArena();
}
inline void CalculatorProfile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CalculatorProfile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.CalculatorProfile.name)
}
inline void CalculatorProfile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediapipe.CalculatorProfile.name)
}
inline void CalculatorProfile::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediapipe.CalculatorProfile.name)
}
inline std::string* CalculatorProfile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculatorProfile::release_name() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorProfile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculatorProfile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorProfile.name)
}

// optional int64 open_runtime = 2 [default = 0];
inline bool CalculatorProfile::_internal_has_open_runtime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CalculatorProfile::has_open_runtime() const {
  return _internal_has_open_runtime();
}
inline void CalculatorProfile::clear_open_runtime() {
  open_runtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CalculatorProfile::_internal_open_runtime() const {
  return open_runtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CalculatorProfile::open_runtime() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.open_runtime)
  return _internal_open_runtime();
}
inline void CalculatorProfile::_internal_set_open_runtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  open_runtime_ = value;
}
inline void CalculatorProfile::set_open_runtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_open_runtime(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorProfile.open_runtime)
}

// optional int64 close_runtime = 3 [default = 0];
inline bool CalculatorProfile::_internal_has_close_runtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CalculatorProfile::has_close_runtime() const {
  return _internal_has_close_runtime();
}
inline void CalculatorProfile::clear_close_runtime() {
  close_runtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CalculatorProfile::_internal_close_runtime() const {
  return close_runtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CalculatorProfile::close_runtime() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.close_runtime)
  return _internal_close_runtime();
}
inline void CalculatorProfile::_internal_set_close_runtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  close_runtime_ = value;
}
inline void CalculatorProfile::set_close_runtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_close_runtime(value);
  // @@protoc_insertion_point(field_set:mediapipe.CalculatorProfile.close_runtime)
}

// optional .mediapipe.TimeHistogram process_runtime = 4;
inline bool CalculatorProfile::_internal_has_process_runtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || process_runtime_ != nullptr);
  return value;
}
inline bool CalculatorProfile::has_process_runtime() const {
  return _internal_has_process_runtime();
}
inline void CalculatorProfile::clear_process_runtime() {
  if (process_runtime_ != nullptr) process_runtime_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::_internal_process_runtime() const {
  const ::mediapipe::TimeHistogram* p = process_runtime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::TimeHistogram*>(
      &::mediapipe::_TimeHistogram_default_instance_);
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::process_runtime() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.process_runtime)
  return _internal_process_runtime();
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::release_process_runtime() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorProfile.process_runtime)
  _has_bits_[0] &= ~0x00000002u;
  ::mediapipe::TimeHistogram* temp = process_runtime_;
  process_runtime_ = nullptr;
  return temp;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::_internal_mutable_process_runtime() {
  _has_bits_[0] |= 0x00000002u;
  if (process_runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimeHistogram>(GetArenaNoVirtual());
    process_runtime_ = p;
  }
  return process_runtime_;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::mutable_process_runtime() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorProfile.process_runtime)
  return _internal_mutable_process_runtime();
}
inline void CalculatorProfile::set_allocated_process_runtime(::mediapipe::TimeHistogram* process_runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_runtime_;
  }
  if (process_runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_runtime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_runtime_ = process_runtime;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorProfile.process_runtime)
}

// optional .mediapipe.TimeHistogram process_input_latency = 5;
inline bool CalculatorProfile::_internal_has_process_input_latency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_input_latency_ != nullptr);
  return value;
}
inline bool CalculatorProfile::has_process_input_latency() const {
  return _internal_has_process_input_latency();
}
inline void CalculatorProfile::clear_process_input_latency() {
  if (process_input_latency_ != nullptr) process_input_latency_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::_internal_process_input_latency() const {
  const ::mediapipe::TimeHistogram* p = process_input_latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::TimeHistogram*>(
      &::mediapipe::_TimeHistogram_default_instance_);
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::process_input_latency() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.process_input_latency)
  return _internal_process_input_latency();
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::release_process_input_latency() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorProfile.process_input_latency)
  _has_bits_[0] &= ~0x00000004u;
  ::mediapipe::TimeHistogram* temp = process_input_latency_;
  process_input_latency_ = nullptr;
  return temp;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::_internal_mutable_process_input_latency() {
  _has_bits_[0] |= 0x00000004u;
  if (process_input_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimeHistogram>(GetArenaNoVirtual());
    process_input_latency_ = p;
  }
  return process_input_latency_;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::mutable_process_input_latency() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorProfile.process_input_latency)
  return _internal_mutable_process_input_latency();
}
inline void CalculatorProfile::set_allocated_process_input_latency(::mediapipe::TimeHistogram* process_input_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_input_latency_;
  }
  if (process_input_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_input_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_input_latency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_input_latency_ = process_input_latency;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorProfile.process_input_latency)
}

// optional .mediapipe.TimeHistogram process_output_latency = 6;
inline bool CalculatorProfile::_internal_has_process_output_latency() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || process_output_latency_ != nullptr);
  return value;
}
inline bool CalculatorProfile::has_process_output_latency() const {
  return _internal_has_process_output_latency();
}
inline void CalculatorProfile::clear_process_output_latency() {
  if (process_output_latency_ != nullptr) process_output_latency_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::_internal_process_output_latency() const {
  const ::mediapipe::TimeHistogram* p = process_output_latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::TimeHistogram*>(
      &::mediapipe::_TimeHistogram_default_instance_);
}
inline const ::mediapipe::TimeHistogram& CalculatorProfile::process_output_latency() const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.process_output_latency)
  return _internal_process_output_latency();
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::release_process_output_latency() {
  // @@protoc_insertion_point(field_release:mediapipe.CalculatorProfile.process_output_latency)
  _has_bits_[0] &= ~0x00000008u;
  ::mediapipe::TimeHistogram* temp = process_output_latency_;
  process_output_latency_ = nullptr;
  return temp;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::_internal_mutable_process_output_latency() {
  _has_bits_[0] |= 0x00000008u;
  if (process_output_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::TimeHistogram>(GetArenaNoVirtual());
    process_output_latency_ = p;
  }
  return process_output_latency_;
}
inline ::mediapipe::TimeHistogram* CalculatorProfile::mutable_process_output_latency() {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorProfile.process_output_latency)
  return _internal_mutable_process_output_latency();
}
inline void CalculatorProfile::set_allocated_process_output_latency(::mediapipe::TimeHistogram* process_output_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_output_latency_;
  }
  if (process_output_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_output_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_output_latency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  process_output_latency_ = process_output_latency;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.CalculatorProfile.process_output_latency)
}

// repeated .mediapipe.StreamProfile input_stream_profiles = 7;
inline int CalculatorProfile::_internal_input_stream_profiles_size() const {
  return input_stream_profiles_.size();
}
inline int CalculatorProfile::input_stream_profiles_size() const {
  return _internal_input_stream_profiles_size();
}
inline void CalculatorProfile::clear_input_stream_profiles() {
  input_stream_profiles_.Clear();
}
inline ::mediapipe::StreamProfile* CalculatorProfile::mutable_input_stream_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.CalculatorProfile.input_stream_profiles)
  return input_stream_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StreamProfile >*
CalculatorProfile::mutable_input_stream_profiles() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.CalculatorProfile.input_stream_profiles)
  return &input_stream_profiles_;
}
inline const ::mediapipe::StreamProfile& CalculatorProfile::_internal_input_stream_profiles(int index) const {
  return input_stream_profiles_.Get(index);
}
inline const ::mediapipe::StreamProfile& CalculatorProfile::input_stream_profiles(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.CalculatorProfile.input_stream_profiles)
  return _internal_input_stream_profiles(index);
}
inline ::mediapipe::StreamProfile* CalculatorProfile::_internal_add_input_stream_profiles() {
  return input_stream_profiles_.Add();
}
inline ::mediapipe::StreamProfile* CalculatorProfile::add_input_stream_profiles() {
  // @@protoc_insertion_point(field_add:mediapipe.CalculatorProfile.input_stream_profiles)
  return _internal_add_input_stream_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::StreamProfile >&
CalculatorProfile::input_stream_profiles() const {
  // @@protoc_insertion_point(field_list:mediapipe.CalculatorProfile.input_stream_profiles)
  return input_stream_profiles_;
}

// -------------------------------------------------------------------

// GraphTrace_StreamTrace

// optional int64 start_time = 1;
inline bool GraphTrace_StreamTrace::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_start_time() const {
  return _internal_has_start_time();
}
inline void GraphTrace_StreamTrace::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::start_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.start_time)
  return _internal_start_time();
}
inline void GraphTrace_StreamTrace::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_time_ = value;
}
inline void GraphTrace_StreamTrace::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.start_time)
}

// optional int64 finish_time = 2;
inline bool GraphTrace_StreamTrace::_internal_has_finish_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_finish_time() const {
  return _internal_has_finish_time();
}
inline void GraphTrace_StreamTrace::clear_finish_time() {
  finish_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::_internal_finish_time() const {
  return finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::finish_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.finish_time)
  return _internal_finish_time();
}
inline void GraphTrace_StreamTrace::_internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  finish_time_ = value;
}
inline void GraphTrace_StreamTrace::set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finish_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.finish_time)
}

// optional int64 packet_timestamp = 3;
inline bool GraphTrace_StreamTrace::_internal_has_packet_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_packet_timestamp() const {
  return _internal_has_packet_timestamp();
}
inline void GraphTrace_StreamTrace::clear_packet_timestamp() {
  packet_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::_internal_packet_timestamp() const {
  return packet_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.packet_timestamp)
  return _internal_packet_timestamp();
}
inline void GraphTrace_StreamTrace::_internal_set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  packet_timestamp_ = value;
}
inline void GraphTrace_StreamTrace::set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_packet_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.packet_timestamp)
}

// optional int32 stream_id = 4;
inline bool GraphTrace_StreamTrace::_internal_has_stream_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_stream_id() const {
  return _internal_has_stream_id();
}
inline void GraphTrace_StreamTrace::clear_stream_id() {
  stream_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_StreamTrace::_internal_stream_id() const {
  return stream_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_StreamTrace::stream_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.stream_id)
  return _internal_stream_id();
}
inline void GraphTrace_StreamTrace::_internal_set_stream_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  stream_id_ = value;
}
inline void GraphTrace_StreamTrace::set_stream_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.stream_id)
}

// optional int64 packet_id = 5 [deprecated = true];
inline bool GraphTrace_StreamTrace::_internal_has_packet_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_packet_id() const {
  return _internal_has_packet_id();
}
inline void GraphTrace_StreamTrace::clear_packet_id() {
  packet_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::_internal_packet_id() const {
  return packet_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::packet_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.packet_id)
  return _internal_packet_id();
}
inline void GraphTrace_StreamTrace::_internal_set_packet_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  packet_id_ = value;
}
inline void GraphTrace_StreamTrace::set_packet_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_packet_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.packet_id)
}

// optional int64 event_data = 6;
inline bool GraphTrace_StreamTrace::_internal_has_event_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GraphTrace_StreamTrace::has_event_data() const {
  return _internal_has_event_data();
}
inline void GraphTrace_StreamTrace::clear_event_data() {
  event_data_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::_internal_event_data() const {
  return event_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_StreamTrace::event_data() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.StreamTrace.event_data)
  return _internal_event_data();
}
inline void GraphTrace_StreamTrace::_internal_set_event_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  event_data_ = value;
}
inline void GraphTrace_StreamTrace::set_event_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_event_data(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.StreamTrace.event_data)
}

// -------------------------------------------------------------------

// GraphTrace_CalculatorTrace

// optional int32 node_id = 1;
inline bool GraphTrace_CalculatorTrace::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_node_id() const {
  return _internal_has_node_id();
}
inline void GraphTrace_CalculatorTrace::clear_node_id() {
  node_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_CalculatorTrace::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_CalculatorTrace::node_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.node_id)
  return _internal_node_id();
}
inline void GraphTrace_CalculatorTrace::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  node_id_ = value;
}
inline void GraphTrace_CalculatorTrace::set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.node_id)
}

// optional int64 input_timestamp = 2;
inline bool GraphTrace_CalculatorTrace::_internal_has_input_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_input_timestamp() const {
  return _internal_has_input_timestamp();
}
inline void GraphTrace_CalculatorTrace::clear_input_timestamp() {
  input_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::_internal_input_timestamp() const {
  return input_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::input_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.input_timestamp)
  return _internal_input_timestamp();
}
inline void GraphTrace_CalculatorTrace::_internal_set_input_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  input_timestamp_ = value;
}
inline void GraphTrace_CalculatorTrace::set_input_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_input_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.input_timestamp)
}

// optional .mediapipe.GraphTrace.EventType event_type = 3;
inline bool GraphTrace_CalculatorTrace::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_event_type() const {
  return _internal_has_event_type();
}
inline void GraphTrace_CalculatorTrace::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::mediapipe::GraphTrace_EventType GraphTrace_CalculatorTrace::_internal_event_type() const {
  return static_cast< ::mediapipe::GraphTrace_EventType >(event_type_);
}
inline ::mediapipe::GraphTrace_EventType GraphTrace_CalculatorTrace::event_type() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.event_type)
  return _internal_event_type();
}
inline void GraphTrace_CalculatorTrace::_internal_set_event_type(::mediapipe::GraphTrace_EventType value) {
  assert(::mediapipe::GraphTrace_EventType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  event_type_ = value;
}
inline void GraphTrace_CalculatorTrace::set_event_type(::mediapipe::GraphTrace_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.event_type)
}

// optional int64 start_time = 4;
inline bool GraphTrace_CalculatorTrace::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_start_time() const {
  return _internal_has_start_time();
}
inline void GraphTrace_CalculatorTrace::clear_start_time() {
  start_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::start_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.start_time)
  return _internal_start_time();
}
inline void GraphTrace_CalculatorTrace::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
}
inline void GraphTrace_CalculatorTrace::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.start_time)
}

// optional int64 finish_time = 5;
inline bool GraphTrace_CalculatorTrace::_internal_has_finish_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_finish_time() const {
  return _internal_has_finish_time();
}
inline void GraphTrace_CalculatorTrace::clear_finish_time() {
  finish_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::_internal_finish_time() const {
  return finish_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace_CalculatorTrace::finish_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.finish_time)
  return _internal_finish_time();
}
inline void GraphTrace_CalculatorTrace::_internal_set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  finish_time_ = value;
}
inline void GraphTrace_CalculatorTrace::set_finish_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finish_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.finish_time)
}

// repeated .mediapipe.GraphTrace.StreamTrace input_trace = 6;
inline int GraphTrace_CalculatorTrace::_internal_input_trace_size() const {
  return input_trace_.size();
}
inline int GraphTrace_CalculatorTrace::input_trace_size() const {
  return _internal_input_trace_size();
}
inline void GraphTrace_CalculatorTrace::clear_input_trace() {
  input_trace_.Clear();
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::mutable_input_trace(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphTrace.CalculatorTrace.input_trace)
  return input_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >*
GraphTrace_CalculatorTrace::mutable_input_trace() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphTrace.CalculatorTrace.input_trace)
  return &input_trace_;
}
inline const ::mediapipe::GraphTrace_StreamTrace& GraphTrace_CalculatorTrace::_internal_input_trace(int index) const {
  return input_trace_.Get(index);
}
inline const ::mediapipe::GraphTrace_StreamTrace& GraphTrace_CalculatorTrace::input_trace(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.input_trace)
  return _internal_input_trace(index);
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::_internal_add_input_trace() {
  return input_trace_.Add();
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::add_input_trace() {
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.CalculatorTrace.input_trace)
  return _internal_add_input_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >&
GraphTrace_CalculatorTrace::input_trace() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphTrace.CalculatorTrace.input_trace)
  return input_trace_;
}

// repeated .mediapipe.GraphTrace.StreamTrace output_trace = 7;
inline int GraphTrace_CalculatorTrace::_internal_output_trace_size() const {
  return output_trace_.size();
}
inline int GraphTrace_CalculatorTrace::output_trace_size() const {
  return _internal_output_trace_size();
}
inline void GraphTrace_CalculatorTrace::clear_output_trace() {
  output_trace_.Clear();
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::mutable_output_trace(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphTrace.CalculatorTrace.output_trace)
  return output_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >*
GraphTrace_CalculatorTrace::mutable_output_trace() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphTrace.CalculatorTrace.output_trace)
  return &output_trace_;
}
inline const ::mediapipe::GraphTrace_StreamTrace& GraphTrace_CalculatorTrace::_internal_output_trace(int index) const {
  return output_trace_.Get(index);
}
inline const ::mediapipe::GraphTrace_StreamTrace& GraphTrace_CalculatorTrace::output_trace(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.output_trace)
  return _internal_output_trace(index);
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::_internal_add_output_trace() {
  return output_trace_.Add();
}
inline ::mediapipe::GraphTrace_StreamTrace* GraphTrace_CalculatorTrace::add_output_trace() {
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.CalculatorTrace.output_trace)
  return _internal_add_output_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_StreamTrace >&
GraphTrace_CalculatorTrace::output_trace() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphTrace.CalculatorTrace.output_trace)
  return output_trace_;
}

// optional int32 thread_id = 8;
inline bool GraphTrace_CalculatorTrace::_internal_has_thread_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GraphTrace_CalculatorTrace::has_thread_id() const {
  return _internal_has_thread_id();
}
inline void GraphTrace_CalculatorTrace::clear_thread_id() {
  thread_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_CalculatorTrace::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphTrace_CalculatorTrace::thread_id() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.CalculatorTrace.thread_id)
  return _internal_thread_id();
}
inline void GraphTrace_CalculatorTrace::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  thread_id_ = value;
}
inline void GraphTrace_CalculatorTrace::set_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.CalculatorTrace.thread_id)
}

// -------------------------------------------------------------------

// GraphTrace

// optional int64 base_time = 1;
inline bool GraphTrace::_internal_has_base_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GraphTrace::has_base_time() const {
  return _internal_has_base_time();
}
inline void GraphTrace::clear_base_time() {
  base_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace::_internal_base_time() const {
  return base_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace::base_time() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.base_time)
  return _internal_base_time();
}
inline void GraphTrace::_internal_set_base_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  base_time_ = value;
}
inline void GraphTrace::set_base_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_base_time(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.base_time)
}

// optional int64 base_timestamp = 2;
inline bool GraphTrace::_internal_has_base_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GraphTrace::has_base_timestamp() const {
  return _internal_has_base_timestamp();
}
inline void GraphTrace::clear_base_timestamp() {
  base_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace::_internal_base_timestamp() const {
  return base_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GraphTrace::base_timestamp() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.base_timestamp)
  return _internal_base_timestamp();
}
inline void GraphTrace::_internal_set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  base_timestamp_ = value;
}
inline void GraphTrace::set_base_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_base_timestamp(value);
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.base_timestamp)
}

// repeated string calculator_name = 3;
inline int GraphTrace::_internal_calculator_name_size() const {
  return calculator_name_.size();
}
inline int GraphTrace::calculator_name_size() const {
  return _internal_calculator_name_size();
}
inline void GraphTrace::clear_calculator_name() {
  calculator_name_.Clear();
}
inline std::string* GraphTrace::add_calculator_name() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.GraphTrace.calculator_name)
  return _internal_add_calculator_name();
}
inline const std::string& GraphTrace::_internal_calculator_name(int index) const {
  return calculator_name_.Get(index);
}
inline const std::string& GraphTrace::calculator_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.calculator_name)
  return _internal_calculator_name(index);
}
inline std::string* GraphTrace::mutable_calculator_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphTrace.calculator_name)
  return calculator_name_.Mutable(index);
}
inline void GraphTrace::set_calculator_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.calculator_name)
  calculator_name_.Mutable(index)->assign(value);
}
inline void GraphTrace::set_calculator_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.calculator_name)
  calculator_name_.Mutable(index)->assign(std::move(value));
}
inline void GraphTrace::set_calculator_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  calculator_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.GraphTrace.calculator_name)
}
inline void GraphTrace::set_calculator_name(int index, const char* value, size_t size) {
  calculator_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.GraphTrace.calculator_name)
}
inline std::string* GraphTrace::_internal_add_calculator_name() {
  return calculator_name_.Add();
}
inline void GraphTrace::add_calculator_name(const std::string& value) {
  calculator_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.calculator_name)
}
inline void GraphTrace::add_calculator_name(std::string&& value) {
  calculator_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.calculator_name)
}
inline void GraphTrace::add_calculator_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  calculator_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.GraphTrace.calculator_name)
}
inline void GraphTrace::add_calculator_name(const char* value, size_t size) {
  calculator_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.GraphTrace.calculator_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphTrace::calculator_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphTrace.calculator_name)
  return calculator_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphTrace::mutable_calculator_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphTrace.calculator_name)
  return &calculator_name_;
}

// repeated string stream_name = 4;
inline int GraphTrace::_internal_stream_name_size() const {
  return stream_name_.size();
}
inline int GraphTrace::stream_name_size() const {
  return _internal_stream_name_size();
}
inline void GraphTrace::clear_stream_name() {
  stream_name_.Clear();
}
inline std::string* GraphTrace::add_stream_name() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.GraphTrace.stream_name)
  return _internal_add_stream_name();
}
inline const std::string& GraphTrace::_internal_stream_name(int index) const {
  return stream_name_.Get(index);
}
inline const std::string& GraphTrace::stream_name(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.stream_name)
  return _internal_stream_name(index);
}
inline std::string* GraphTrace::mutable_stream_name(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphTrace.stream_name)
  return stream_name_.Mutable(index);
}
inline void GraphTrace::set_stream_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.stream_name)
  stream_name_.Mutable(index)->assign(value);
}
inline void GraphTrace::set_stream_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.GraphTrace.stream_name)
  stream_name_.Mutable(index)->assign(std::move(value));
}
inline void GraphTrace::set_stream_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.GraphTrace.stream_name)
}
inline void GraphTrace::set_stream_name(int index, const char* value, size_t size) {
  stream_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.GraphTrace.stream_name)
}
inline std::string* GraphTrace::_internal_add_stream_name() {
  return stream_name_.Add();
}
inline void GraphTrace::add_stream_name(const std::string& value) {
  stream_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.stream_name)
}
inline void GraphTrace::add_stream_name(std::string&& value) {
  stream_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.stream_name)
}
inline void GraphTrace::add_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.GraphTrace.stream_name)
}
inline void GraphTrace::add_stream_name(const char* value, size_t size) {
  stream_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.GraphTrace.stream_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphTrace::stream_name() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphTrace.stream_name)
  return stream_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphTrace::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphTrace.stream_name)
  return &stream_name_;
}

// repeated .mediapipe.GraphTrace.CalculatorTrace calculator_trace = 5;
inline int GraphTrace::_internal_calculator_trace_size() const {
  return calculator_trace_.size();
}
inline int GraphTrace::calculator_trace_size() const {
  return _internal_calculator_trace_size();
}
inline void GraphTrace::clear_calculator_trace() {
  calculator_trace_.Clear();
}
inline ::mediapipe::GraphTrace_CalculatorTrace* GraphTrace::mutable_calculator_trace(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphTrace.calculator_trace)
  return calculator_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_CalculatorTrace >*
GraphTrace::mutable_calculator_trace() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphTrace.calculator_trace)
  return &calculator_trace_;
}
inline const ::mediapipe::GraphTrace_CalculatorTrace& GraphTrace::_internal_calculator_trace(int index) const {
  return calculator_trace_.Get(index);
}
inline const ::mediapipe::GraphTrace_CalculatorTrace& GraphTrace::calculator_trace(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphTrace.calculator_trace)
  return _internal_calculator_trace(index);
}
inline ::mediapipe::GraphTrace_CalculatorTrace* GraphTrace::_internal_add_calculator_trace() {
  return calculator_trace_.Add();
}
inline ::mediapipe::GraphTrace_CalculatorTrace* GraphTrace::add_calculator_trace() {
  // @@protoc_insertion_point(field_add:mediapipe.GraphTrace.calculator_trace)
  return _internal_add_calculator_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace_CalculatorTrace >&
GraphTrace::calculator_trace() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphTrace.calculator_trace)
  return calculator_trace_;
}

// -------------------------------------------------------------------

// GraphProfile

// repeated .mediapipe.GraphTrace graph_trace = 1;
inline int GraphProfile::_internal_graph_trace_size() const {
  return graph_trace_.size();
}
inline int GraphProfile::graph_trace_size() const {
  return _internal_graph_trace_size();
}
inline void GraphProfile::clear_graph_trace() {
  graph_trace_.Clear();
}
inline ::mediapipe::GraphTrace* GraphProfile::mutable_graph_trace(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphProfile.graph_trace)
  return graph_trace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace >*
GraphProfile::mutable_graph_trace() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphProfile.graph_trace)
  return &graph_trace_;
}
inline const ::mediapipe::GraphTrace& GraphProfile::_internal_graph_trace(int index) const {
  return graph_trace_.Get(index);
}
inline const ::mediapipe::GraphTrace& GraphProfile::graph_trace(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphProfile.graph_trace)
  return _internal_graph_trace(index);
}
inline ::mediapipe::GraphTrace* GraphProfile::_internal_add_graph_trace() {
  return graph_trace_.Add();
}
inline ::mediapipe::GraphTrace* GraphProfile::add_graph_trace() {
  // @@protoc_insertion_point(field_add:mediapipe.GraphProfile.graph_trace)
  return _internal_add_graph_trace();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::GraphTrace >&
GraphProfile::graph_trace() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphProfile.graph_trace)
  return graph_trace_;
}

// repeated .mediapipe.CalculatorProfile calculator_profiles = 2;
inline int GraphProfile::_internal_calculator_profiles_size() const {
  return calculator_profiles_.size();
}
inline int GraphProfile::calculator_profiles_size() const {
  return _internal_calculator_profiles_size();
}
inline void GraphProfile::clear_calculator_profiles() {
  calculator_profiles_.Clear();
}
inline ::mediapipe::CalculatorProfile* GraphProfile::mutable_calculator_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphProfile.calculator_profiles)
  return calculator_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorProfile >*
GraphProfile::mutable_calculator_profiles() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.GraphProfile.calculator_profiles)
  return &calculator_profiles_;
}
inline const ::mediapipe::CalculatorProfile& GraphProfile::_internal_calculator_profiles(int index) const {
  return calculator_profiles_.Get(index);
}
inline const ::mediapipe::CalculatorProfile& GraphProfile::calculator_profiles(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphProfile.calculator_profiles)
  return _internal_calculator_profiles(index);
}
inline ::mediapipe::CalculatorProfile* GraphProfile::_internal_add_calculator_profiles() {
  return calculator_profiles_.Add();
}
inline ::mediapipe::CalculatorProfile* GraphProfile::add_calculator_profiles() {
  // @@protoc_insertion_point(field_add:mediapipe.GraphProfile.calculator_profiles)
  return _internal_add_calculator_profiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mediapipe::CalculatorProfile >&
GraphProfile::calculator_profiles() const {
  // @@protoc_insertion_point(field_list:mediapipe.GraphProfile.calculator_profiles)
  return calculator_profiles_;
}

// optional .mediapipe.CalculatorGraphConfig config = 3;
inline bool GraphProfile::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || config_ != nullptr);
  return value;
}
inline bool GraphProfile::has_config() const {
  return _internal_has_config();
}
inline const ::mediapipe::CalculatorGraphConfig& GraphProfile::_internal_config() const {
  const ::mediapipe::CalculatorGraphConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mediapipe::CalculatorGraphConfig*>(
      &::mediapipe::_CalculatorGraphConfig_default_instance_);
}
inline const ::mediapipe::CalculatorGraphConfig& GraphProfile::config() const {
  // @@protoc_insertion_point(field_get:mediapipe.GraphProfile.config)
  return _internal_config();
}
inline ::mediapipe::CalculatorGraphConfig* GraphProfile::release_config() {
  // @@protoc_insertion_point(field_release:mediapipe.GraphProfile.config)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::CalculatorGraphConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::mediapipe::CalculatorGraphConfig* GraphProfile::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::CalculatorGraphConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::mediapipe::CalculatorGraphConfig* GraphProfile::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mediapipe.GraphProfile.config)
  return _internal_mutable_config();
}
inline void GraphProfile::set_allocated_config(::mediapipe::CalculatorGraphConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.GraphProfile.config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::GraphTrace_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::GraphTrace_EventType>() {
  return ::mediapipe::GraphTrace_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fcalculator_5fprofile_2eproto
